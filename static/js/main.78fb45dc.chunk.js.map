{"version":3,"sources":["components/Dgrid.jsx","components/Barchart.jsx","components/Home.jsx","assets/logo.png","App.js","reportWebVitals.js","index.js"],"names":["columns","field","headerName","width","type","description","sortable","valueGetter","params","getValue","Dgrid","props","useState","data","setData","myloading","setLoading","useEffect","a","axios","result","fetchData","className","style","display","vision","rows","pageSize","checkboxSelection","loading","components","Toolbar","GridToolbar","columnBuffer","Bartchat","newData","setNewData","React","useMemo","label","x","y","axes","primary","position","console","log","height","Home","click","setClick","onClick","App","src","logo","alt","jojo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78fb45dc.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport axios from \"axios\"\nimport { DataGrid, GridToolbar } from '@material-ui/data-grid';\n\n\nconst columns = [\n    { field: 'id', headerName: 'ID', width: 70 },\n    { field: 'subscriptionname', headerName: 'Service name', width: 250 },\n    { field: 'servicename', headerName: 'Subscription Name', width: 250 },\n    { field: 'date', headerName: 'Date ', width: 150 },\n    { field: 'quantity', headerName: 'Quantity',type: 'number', width: 150 },\n    { field: 'cost', headerName: 'Cost', type: 'number', width: 150 },\n    {\n      field: 'fullName',\n      headerName: 'Total cost',\n      description: 'This column has a value getter and is not sortable.',\n      sortable: false,\n      width: 160,\n      valueGetter: (params) =>\n        `${params.getValue('quantity') * params.getValue('cost') || ''}`,\n    },\n  ];\n\n\n\n\nexport default function Dgrid(props) {\n    const [data, setData] = useState([]);\n    const [myloading, setLoading] = useState(true);\n    \n    useEffect(() => {\n      const fetchData = async () => {\n        const result = await axios(\n          'https://api-spider.azurewebsites.net/servicename',\n        );\n   \n        setData(result.data);\n        setLoading(false)\n      };\n   \n      fetchData();\n    }, []);\n   \n    return (\n        <>\n        <div className=\"datagrid\" style={{ display: props.vision}}>\n        <DataGrid rows={data} columns={columns} pageSize={10} checkboxSelection loading={myloading}   components={{\n    Toolbar: GridToolbar,\n  }} columnBuffer={5} />\n      </div>\n      </>\n    );\n  }\n   ","import React, {useState, useEffect} from 'react'\nimport { Chart } from 'react-charts'\nimport axios from \"axios\"\n\n\nexport default function Bartchat() {\n    const [newData, setNewData] = useState([]);\n    useEffect(() => {\n        const fetchData = async () => {\n          const result = await axios(\n            'http://api-spider.azurewebsites.net/servicename',\n          );\n     \n          setNewData(result.data);\n        };\n     \n        fetchData();\n      }, []);\n\n\n    const data = React.useMemo(\n      () => [\n        {\n          label: 'Series 1',\n          data: [{ x: 1, y: 10 }, { x: 2, y: 10 }, { x: 3, y: 10 }]\n        },\n        {\n          label: 'Series 2',\n          data: [{ x: 1, y: 10 }, { x: 2, y: 10 }, { x: 3, y: 10 }]\n        },\n        {\n          label: 'Series 3',\n          data: [{ x: 1, y: 10 }, { x: 2, y: 10 }, { x: 3, y: 10 }]\n        }\n      ],\n      []\n    )\n   \n    const axes = React.useMemo(\n      () => [\n        { primary: true, type: 'linear', position: 'bottom' },\n        { type: 'linear', position: 'left' }\n      ],\n      []\n    )\n   \n   console.log(newData)\n    return (\n      <div\n        style={{\n          width: '400px',\n          height: '300px'\n        }}\n      >\n        <Chart data={data} axes={axes} />\n        \n      </div>\n    )\n  }","import React, {useState} from 'react'\nimport Dgrid from \"./Dgrid\"\nimport Barchart from \"./Barchart\"\n\nexport default function Home(props) {\n    const [click, setClick] = useState(true)\n    \n    return (\n        <div className=\"Container\">\n            <p className=\"title\"> Welcome to the monitoring App</p>\n            \n            <button className=\"btn-home\" onClick={() => {\n                setClick(!click) \n            }}>Click here to see the data</button>\n            {click? <Dgrid vision=\"none\" />: <Dgrid vision=\"block\" />  }\n            <Barchart></Barchart>\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/logo.3972d187.png\";","import './App.css';\nimport Home from \"./components/Home\"\nimport logo  from \"./assets/logo.png\"\nimport React from \"react\"\n\nfunction App() {\n  let jojo = \"0\"\n  return (\n    <div className=\"App\"> \n\n    <img src={logo} className=\"head-logo\" alt=\"logo\"></img>\n    <Home jojo={jojo} />\n\n    \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}